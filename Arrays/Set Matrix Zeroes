Method 1-> Brute force

void makeRow(vector<vector<int>>& matrix,int i,int n,int m){
        for(int j=0;j<m;j++){
            if(matrix[i][j]!=0){
                matrix[i][j]=-1;
            }
        }
    }

    void makeCol(vector<vector<int>>& matrix,int j,int n,int m){
        for(int i=0;i<n;i++){
            if(matrix[i][j]!=0){
                matrix[i][j]=-1;
            }
        }
    }
    void setZeroes(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j]==0){
                    makeRow(matrix,i,n,m);
                    makeCol(matrix,j,n,m);
                }
            }
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j]==-1){
                    matrix[i][j]=0;
                }
            }
        }
    }
 TC->O(n*m) + O(n+m) + O(n*m)
 SC->O(1)
 
 Method 2-> Better Approach
 
 void setZeroes(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();

        vector<int> row(n,0);
        vector<int> col(m,0);

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j]==0){
                    row[i]=1;
                    col[j]=1;
                }
            }
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(row[i]==1  || col[j]==1){
                    matrix[i][j]=0;
                }
            }
        }
    }
   TC->O(2*n*m)
   SC->O(n)+O(m)
